#!/usr/bin/env python3
"""
Test runner script for the E-commerce Telegram Bot
"""
import sys
import subprocess
import os
from pathlib import Path


def run_tests():
    """Run all tests with proper configuration"""
    
    # Set test environment
    os.environ['DATABASE_URL'] = 'sqlite:///./test.db'
    os.environ['DEBUG'] = 'True'
    os.environ['LOG_LEVEL'] = 'WARNING'  # Reduce log noise during tests
    
    # Test command
    test_command = [
        sys.executable, '-m', 'pytest',
        'tests.py',
        '-v',  # Verbose output
        '--tb=short',  # Short traceback format
        '--disable-warnings',  # Disable warnings
        '--color=yes'  # Colored output
    ]
    
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(test_command)}")
    print("-" * 50)
    
    try:
        # Run tests
        result = subprocess.run(test_command, check=True)
        
        print("-" * 50)
        print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except subprocess.CalledProcessError as e:
        print("-" * 50)
        print(f"‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {e.returncode})")
        return False
        
    except FileNotFoundError:
        print("‚ùå pytest –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install pytest")
        return False


def run_specific_test(test_name):
    """Run specific test"""
    os.environ['DATABASE_URL'] = 'sqlite:///./test.db'
    os.environ['DEBUG'] = 'True'
    os.environ['LOG_LEVEL'] = 'WARNING'
    
    test_command = [
        sys.executable, '-m', 'pytest',
        f'tests.py::{test_name}',
        '-v',
        '--tb=short',
        '--disable-warnings',
        '--color=yes'
    ]
    
    print(f"üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {' '.join(test_command)}")
    print("-" * 50)
    
    try:
        result = subprocess.run(test_command, check=True)
        print("-" * 50)
        print(f"‚úÖ –¢–µ—Å—Ç {test_name} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except subprocess.CalledProcessError as e:
        print("-" * 50)
        print(f"‚ùå –¢–µ—Å—Ç {test_name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π")
        return False


def run_coverage():
    """Run tests with coverage report"""
    try:
        import coverage
    except ImportError:
        print("‚ùå coverage –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: pip install coverage")
        return False
    
    os.environ['DATABASE_URL'] = 'sqlite:///./test.db'
    os.environ['DEBUG'] = 'True'
    os.environ['LOG_LEVEL'] = 'WARNING'
    
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞...")
    
    # Run coverage
    coverage_command = [
        sys.executable, '-m', 'coverage', 'run', '-m', 'pytest', 'tests.py', '-v'
    ]
    
    try:
        subprocess.run(coverage_command, check=True)
        
        # Generate report
        report_command = [sys.executable, '-m', 'coverage', 'report']
        subprocess.run(report_command, check=True)
        
        # Generate HTML report
        html_command = [sys.executable, '-m', 'coverage', 'html']
        subprocess.run(html_command, check=True)
        
        print("‚úÖ –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞ —Å–æ–∑–¥–∞–Ω –≤ htmlcov/index.html")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º: {e}")
        return False


def main():
    """Main function"""
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "coverage":
            success = run_coverage()
        elif command.startswith("test:"):
            test_name = command.split(":", 1)[1]
            success = run_specific_test(test_name)
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("  python run_tests.py          - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã")
            print("  python run_tests.py coverage - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º")
            print("  python run_tests.py test:TestName - –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç")
            return False
    else:
        success = run_tests()
    
    # Cleanup test database
    test_db = Path("test.db")
    if test_db.exists():
        test_db.unlink()
        print("üßπ –¢–µ—Å—Ç–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")
    
    return success


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
