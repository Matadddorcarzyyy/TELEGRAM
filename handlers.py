"""
Message and callback handlers for the E-commerce Telegram Bot
"""
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
from sqlalchemy.orm import Session
from typing import Dict, Any
import logging

from database import get_db_session
from services import CategoryService, ProductService, UserService, CartService, OrderService
from keyboards import KeyboardBuilder
from models import OrderCreate, DeliveryMethod, OrderStatus
from config import settings

logger = logging.getLogger(__name__)


class BotHandlers:
    """Main handlers class for the bot"""
    
    def __init__(self):
        self.user_states: Dict[int, Dict[str, Any]] = {}
    
    def get_user_state(self, user_id: int) -> Dict[str, Any]:
        """Get user state"""
        if user_id not in self.user_states:
            self.user_states[user_id] = {}
        return self.user_states[user_id]
    
    def set_user_state(self, user_id: int, state: str, data: Any = None):
        """Set user state"""
        user_state = self.get_user_state(user_id)
        user_state['state'] = state
        if data:
            user_state['data'] = data
    
    def clear_user_state(self, user_id: int):
        """Clear user state"""
        if user_id in self.user_states:
            del self.user_states[user_id]
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user = update.effective_user
        db = get_db_session()
        
        try:
            # Get or create user
            user_service = UserService(db)
            db_user = user_service.get_or_create_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            
            # Clear any existing state
            self.clear_user_state(user.id)
            
            # Send welcome message
            keyboard = KeyboardBuilder.main_menu_keyboard()
            await update.message.reply_text(
                settings.welcome_message,
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"Error in start command: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            db.close()
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_text = """
üõçÔ∏è *–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω - –ü–æ–º–æ—â—å*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/cart - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
/orders - –ú–æ–∏ –∑–∞–∫–∞–∑—ã

*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*
1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤
2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
3. –î–æ–±–∞–≤—å—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É
4. –û—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑

*–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:*
/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)
    
    async def admin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /admin command"""
        user = update.effective_user
        
        if user.id != settings.admin_user_id:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        keyboard = KeyboardBuilder.admin_keyboard()
        await update.message.reply_text(
            "üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def callback_query_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle callback queries"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        data = query.data
        
        db = get_db_session()
        
        try:
            if data == "main_menu":
                await self.show_main_menu(query, user)
            elif data == "categories":
                await self.show_categories(query, db)
            elif data.startswith("category_"):
                category_id = int(data.split("_")[1])
                await self.show_products(query, db, category_id)
            elif data.startswith("product_"):
                product_id = int(data.split("_")[1])
                await self.show_product_detail(query, db, product_id)
            elif data.startswith("add_to_cart_"):
                product_id = int(data.split("_")[3])
                await self.add_to_cart(query, db, user, product_id)
            elif data == "cart":
                await self.show_cart(query, db, user)
            elif data.startswith("decrease_cart_"):
                cart_item_id = int(data.split("_")[2])
                await self.decrease_cart_item(query, db, cart_item_id)
            elif data.startswith("remove_cart_"):
                cart_item_id = int(data.split("_")[2])
                await self.remove_cart_item(query, db, cart_item_id)
            elif data == "checkout":
                await self.start_checkout(query, db, user)
            elif data.startswith("delivery_"):
                delivery_method = data.split("_")[1]
                await self.select_delivery_method(query, user, delivery_method)
            elif data.startswith("confirm_order_"):
                order_id = int(data.split("_")[2])
                await self.confirm_order(query, db, order_id)
            elif data == "my_orders":
                await self.show_user_orders(query, db, user)
            elif data == "about":
                await self.show_about(query)
            elif data == "admin_menu":
                await self.show_admin_menu(query, user)
            elif data == "admin_products":
                await self.show_admin_products(query)
            elif data == "admin_categories":
                await self.show_admin_categories(query)
            elif data == "admin_orders":
                await self.show_admin_orders(query, db)
            elif data == "admin_all_orders":
                await self.show_all_orders(query, db)
            elif data.startswith("admin_confirm_"):
                order_id = int(data.split("_")[2])
                await self.admin_confirm_order(query, db, order_id)
            elif data.startswith("admin_ship_"):
                order_id = int(data.split("_")[2])
                await self.admin_ship_order(query, db, order_id)
            elif data.startswith("admin_deliver_"):
                order_id = int(data.split("_")[2])
                await self.admin_deliver_order(query, db, order_id)
            elif data.startswith("admin_cancel_"):
                order_id = int(data.split("_")[2])
                await self.admin_cancel_order(query, db, order_id)
            else:
                await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
                
        except Exception as e:
            logger.error(f"Error in callback query handler: {e}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        finally:
            db.close()
    
    async def show_main_menu(self, query, user):
        """Show main menu"""
        keyboard = KeyboardBuilder.main_menu_keyboard()
        if user.id == settings.admin_user_id:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton("üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_menu")
            ])
        
        await query.edit_message_text(
            settings.welcome_message,
            reply_markup=keyboard
        )
    
    async def show_categories(self, query, db):
        """Show categories"""
        category_service = CategoryService(db)
        categories = category_service.get_all_categories()
        
        if not categories:
            await query.edit_message_text(
                "üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.",
                reply_markup=KeyboardBuilder.main_menu_keyboard()
            )
            return
        
        keyboard = KeyboardBuilder.categories_keyboard(categories)
        await query.edit_message_text(
            "üìÅ *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:*",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def show_products(self, query, db, category_id):
        """Show products in category"""
        category_service = CategoryService(db)
        product_service = ProductService(db)
        
        category = category_service.get_category_by_id(category_id)
        if not category:
            await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        products = product_service.get_products_by_category(category_id)
        
        if not products:
            await query.edit_message_text(
                f"üì¶ –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}' –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.",
                reply_markup=KeyboardBuilder.main_menu_keyboard()
            )
            return
        
        keyboard = KeyboardBuilder.products_keyboard(products, category_id)
        await query.edit_message_text(
            f"üì¶ *–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category.name}':*",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def show_product_detail(self, query, db, product_id):
        """Show product detail"""
        product_service = ProductService(db)
        product = product_service.get_product_by_id(product_id)
        
        if not product:
            await query.edit_message_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # Format product info
        text = f"""
üõçÔ∏è *{product.name}*

üí∞ –¶–µ–Ω–∞: {product.price:.2f} ‚ÇΩ
üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {product.stock_quantity} —à—Ç.

üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*
{product.description or '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
        """
        
        keyboard = KeyboardBuilder.product_detail_keyboard(product)
        
        if product.photo_url:
            await query.edit_message_media(
                media=product.photo_url,
                caption=text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await query.edit_message_text(
                text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def add_to_cart(self, query, db, user, product_id):
        """Add product to cart"""
        user_service = UserService(db)
        cart_service = CartService(db)
        product_service = ProductService(db)
        
        # Get or create user
        db_user = user_service.get_or_create_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # Check product availability
        product = product_service.get_product_by_id(product_id)
        if not product or product.stock_quantity <= 0:
            await query.answer("–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
            return
        
        # Add to cart
        cart_service.add_to_cart(db_user.id, product_id)
        
        await query.answer(f"‚úÖ {product.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
    
    async def show_cart(self, query, db, user):
        """Show cart"""
        user_service = UserService(db)
        cart_service = CartService(db)
        
        # Get user
        db_user = user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await query.edit_message_text(
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –∫–æ–º–∞–Ω–¥–æ–π /start",
                reply_markup=KeyboardBuilder.main_menu_keyboard()
            )
            return
        
        cart_items = cart_service.get_cart_items(db_user.id)
        
        if not cart_items:
            await query.edit_message_text(
                settings.cart_empty_message,
                reply_markup=KeyboardBuilder.main_menu_keyboard()
            )
            return
        
        # Format cart content
        text = "üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*\n\n"
        total_amount = 0
        
        for item in cart_items:
            item_total = item.quantity * item.product.price
            total_amount += item_total
            text += f"üõçÔ∏è {item.product.name}\n"
            text += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.quantity}\n"
            text += f"   –¶–µ–Ω–∞: {item.product.price:.2f} ‚ÇΩ\n"
            text += f"   –°—É–º–º–∞: {item_total:.2f} ‚ÇΩ\n\n"
        
        text += f"üí∞ *–û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.2f} ‚ÇΩ*"
        
        keyboard = KeyboardBuilder.cart_keyboard(cart_items)
        await query.edit_message_text(
            text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def decrease_cart_item(self, query, db, cart_item_id):
        """Decrease cart item quantity"""
        cart_service = CartService(db)
        
        cart_item = db.query(CartItem).filter(CartItem.id == cart_item_id).first()
        if not cart_item:
            await query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ", show_alert=True)
            return
        
        if cart_item.quantity > 1:
            cart_service.update_cart_item_quantity(cart_item_id, cart_item.quantity - 1)
            await query.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ")
        else:
            cart_service.remove_from_cart(cart_item_id)
            await query.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        
        # Refresh cart view
        await self.show_cart(query, db, query.from_user)
    
    async def remove_cart_item(self, query, db, cart_item_id):
        """Remove cart item"""
        cart_service = CartService(db)
        
        success = cart_service.remove_from_cart(cart_item_id)
        if success:
            await query.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
            # Refresh cart view
            await self.show_cart(query, db, query.from_user)
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞", show_alert=True)
    
    async def start_checkout(self, query, db, user):
        """Start checkout process"""
        user_service = UserService(db)
        cart_service = CartService(db)
        
        # Get user
        db_user = user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # Check cart
        cart_items = cart_service.get_cart_items(db_user.id)
        if not cart_items:
            await query.edit_message_text(
                settings.cart_empty_message,
                reply_markup=KeyboardBuilder.main_menu_keyboard()
            )
            return
        
        # Set user state for checkout
        self.set_user_state(user.id, "checkout_delivery")
        
        keyboard = KeyboardBuilder.delivery_method_keyboard()
        await query.edit_message_text(
            "üöö *–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:*",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def select_delivery_method(self, query, user, delivery_method):
        """Select delivery method"""
        # Set delivery method in user state
        user_state = self.get_user_state(user.id)
        user_state['delivery_method'] = delivery_method
        self.set_user_state(user.id, "checkout_contact_info")
        
        await query.edit_message_text(
            "üìù *–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*\n\n"
            "–§–æ—Ä–º–∞—Ç: –ò–º—è –§–∞–º–∏–ª–∏—è, –¢–µ–ª–µ—Ñ–æ–Ω, –ê–¥—Ä–µ—Å\n"
            "–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, +7(999)123-45-67, —É–ª. –ü—É—à–∫–∏–Ω–∞, –¥. 1, –∫–≤. 1",
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def confirm_order(self, query, db, order_id):
        """Confirm order"""
        order_service = OrderService(db)
        
        order = order_service.get_order_by_id(order_id)
        if not order:
            await query.edit_message_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # Update order status to confirmed
        order_service.update_order_status(order_id, OrderStatus.CONFIRMED)
        
        await query.edit_message_text(
            f"‚úÖ *–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!*\n\n"
            f"üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order.order_number}\n"
            f"üí∞ –°—É–º–º–∞: {order.total_amount:.2f} ‚ÇΩ\n"
            f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {order.delivery_method}\n\n"
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
            reply_markup=KeyboardBuilder.main_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
        
        # Clear user state
        self.clear_user_state(query.from_user.id)
    
    async def show_user_orders(self, query, db, user):
        """Show user orders"""
        user_service = UserService(db)
        order_service = OrderService(db)
        
        # Get user
        db_user = user_service.get_user_by_telegram_id(user.id)
        if not db_user:
            await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        orders = order_service.get_user_orders(db_user.id)
        
        if not orders:
            await query.edit_message_text(
                "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.",
                reply_markup=KeyboardBuilder.main_menu_keyboard()
            )
            return
        
        text = "üìã *–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n\n"
        
        for order in orders[:5]:  # Show last 5 orders
            status_emoji = {
                "pending": "‚è≥",
                "confirmed": "‚úÖ",
                "shipped": "üöö",
                "delivered": "üì¶",
                "cancelled": "‚ùå"
            }.get(order.status, "‚ùì")
            
            text += f"{status_emoji} *{order.order_number}*\n"
            text += f"üí∞ {order.total_amount:.2f} ‚ÇΩ\n"
            text += f"üìÖ {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += f"üìä –°—Ç–∞—Ç—É—Å: {order.status}\n\n"
        
        keyboard = KeyboardBuilder.main_menu_keyboard()
        await query.edit_message_text(
            text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def show_about(self, query):
        """Show about information"""
        text = """
üõçÔ∏è *–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω!

*–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:*
‚úÖ –®–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤
‚úÖ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
‚úÖ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ü–µ–Ω—ã

*–°–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∞–≤–∫–∏:*
üöö –ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
üìÆ –ü–æ—á—Ç–æ–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
üè™ –°–∞–º–æ–≤—ã–≤–æ–∑

*–ö–æ–Ω—Ç–∞–∫—Ç—ã:*
üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7(999)123-45-67
üìß Email: info@shop.ru
        """
        
        await query.edit_message_text(
            text,
            reply_markup=KeyboardBuilder.main_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    
    # Admin handlers
    async def show_admin_menu(self, query, user):
        """Show admin menu"""
        if user.id != settings.admin_user_id:
            await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return
        
        keyboard = KeyboardBuilder.admin_keyboard()
        await query.edit_message_text(
            "üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def show_admin_products(self, query):
        """Show admin products menu"""
        keyboard = KeyboardBuilder.admin_products_keyboard()
        await query.edit_message_text(
            "üì¶ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏*",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def show_admin_categories(self, query):
        """Show admin categories menu"""
        keyboard = KeyboardBuilder.admin_categories_keyboard()
        await query.edit_message_text(
            "üìÅ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏*",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def show_admin_orders(self, query, db):
        """Show admin orders menu"""
        keyboard = KeyboardBuilder.admin_orders_keyboard()
        await query.edit_message_text(
            "üìã *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏*",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def show_all_orders(self, query, db):
        """Show all orders"""
        order_service = OrderService(db)
        orders = order_service.get_all_orders()
        
        if not orders:
            await query.edit_message_text(
                "üìã –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
                reply_markup=KeyboardBuilder.admin_orders_keyboard()
            )
            return
        
        text = "üìã *–í—Å–µ –∑–∞–∫–∞–∑—ã:*\n\n"
        
        for order in orders[:10]:  # Show last 10 orders
            status_emoji = {
                "pending": "‚è≥",
                "confirmed": "‚úÖ",
                "shipped": "üöö",
                "delivered": "üì¶",
                "cancelled": "‚ùå"
            }.get(order.status, "‚ùì")
            
            text += f"{status_emoji} *{order.order_number}*\n"
            text += f"üë§ {order.customer_name}\n"
            text += f"üí∞ {order.total_amount:.2f} ‚ÇΩ\n"
            text += f"üìÖ {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += f"üìä –°—Ç–∞—Ç—É—Å: {order.status}\n\n"
        
        keyboard = KeyboardBuilder.admin_orders_keyboard()
        await query.edit_message_text(
            text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def admin_confirm_order(self, query, db, order_id):
        """Admin confirm order"""
        order_service = OrderService(db)
        
        order = order_service.update_order_status(order_id, OrderStatus.CONFIRMED)
        if order:
            await query.answer("–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω")
            await self.show_all_orders(query, db)
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)
    
    async def admin_ship_order(self, query, db, order_id):
        """Admin ship order"""
        order_service = OrderService(db)
        
        order = order_service.update_order_status(order_id, OrderStatus.SHIPPED)
        if order:
            await query.answer("–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            await self.show_all_orders(query, db)
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞", show_alert=True)
    
    async def admin_deliver_order(self, query, db, order_id):
        """Admin mark order as delivered"""
        order_service = OrderService(db)
        
        order = order_service.update_order_status(order_id, OrderStatus.DELIVERED)
        if order:
            await query.answer("–ó–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω")
            await self.show_all_orders(query, db)
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)
    
    async def admin_cancel_order(self, query, db, order_id):
        """Admin cancel order"""
        order_service = OrderService(db)
        
        order = order_service.update_order_status(order_id, OrderStatus.CANCELLED)
        if order:
            await query.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")
            await self.show_all_orders(query, db)
        else:
            await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞", show_alert=True)
    
    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle text messages"""
        user = update.effective_user
        text = update.message.text
        
        user_state = self.get_user_state(user.id)
        current_state = user_state.get('state')
        
        if current_state == "checkout_contact_info":
            await self.process_contact_info(update, context, user, text)
        else:
            # Default response for unrecognized messages
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            )
    
    async def process_contact_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user, text):
        """Process contact information during checkout"""
        db = get_db_session()
        
        try:
            # Parse contact info (simple parsing)
            parts = text.split(',')
            if len(parts) < 3:
                await update.message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ: –ò–º—è –§–∞–º–∏–ª–∏—è, –¢–µ–ª–µ—Ñ–æ–Ω, –ê–¥—Ä–µ—Å"
                )
                return
            
            name = parts[0].strip()
            phone = parts[1].strip()
            address = parts[2].strip()
            
            # Get user state
            user_state = self.get_user_state(user.id)
            delivery_method = user_state.get('delivery_method', 'pickup')
            
            # Create order
            user_service = UserService(db)
            order_service = OrderService(db)
            
            db_user = user_service.get_user_by_telegram_id(user.id)
            if not db_user:
                await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # Create order data
            order_data = OrderCreate(
                delivery_method=DeliveryMethod(delivery_method),
                delivery_address=address,
                customer_name=name,
                customer_phone=phone
            )
            
            # Create order
            order = order_service.create_order(db_user.id, order_data)
            
            # Show order confirmation
            text = f"""
üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞*

üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order.order_number}
üë§ –ò–º—è: {name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
üöö –î–æ—Å—Ç–∞–≤–∫–∞: {delivery_method}
üìç –ê–¥—Ä–µ—Å: {address}
üí∞ –°—É–º–º–∞: {order.total_amount:.2f} ‚ÇΩ

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:
            """
            
            keyboard = KeyboardBuilder.order_confirmation_keyboard(order.id)
            await update.message.reply_text(
                text,
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
            
            # Clear user state
            self.clear_user_state(user.id)
            
        except Exception as e:
            logger.error(f"Error processing contact info: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.")
        finally:
            db.close()
